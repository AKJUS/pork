root: Node
types:
  Expression:
    parent: Node
  Symbol:
    parent: Node
    values:
    - name: id
      type: String
  Declaration:
    parent: Node
  Definition:
    parent: Node
    values:
    - name: symbol
      type: Symbol
      required: true
    - name: modifiers
      type: DefinitionModifiers
      required: true
  TypeSpec:
    parent: Node
    values:
    - name: symbol
      type: Symbol
  DefinitionModifiers:
    values:
    - name: export
      type: Boolean
  Block:
    parent: Node
    values:
    - name: expressions
      type: List<Expression>
  CompilationUnit:
    parent: Node
    values:
    - name: declarations
      type: List<Declaration>
    - name: definitions
      type: List<Definition>
  LetAssignment:
    parent: Expression
    namedElementValue: symbol
    values:
    - name: symbol
      type: Symbol
    - name: value
      type: Expression
    - name: typeSpec
      type: TypeSpec?
  VarAssignment:
    parent: Expression
    namedElementValue: symbol
    values:
    - name: symbol
      type: Symbol
    - name: value
      type: Expression
    - name: typeSpec
      type: TypeSpec?
  SetAssignment:
    parent: Expression
    values:
    - name: symbol
      type: Symbol
    - name: value
      type: Expression
  InfixOperator:
    values:
    - name: token
      type: String
    enums:
    - name: Plus
      values:
        token: "+"
    - name: Minus
      values:
        token: "-"
    - name: Multiply
      values:
        token: "*"
    - name: Divide
      values:
        token: "/"
    - name: Equals
      values:
        token: "=="
    - name: NotEquals
      values:
        token: "!="
    - name: EuclideanModulo
      values:
        token: "mod"
    - name: Remainder
      values:
        token: "rem"
    - name: Lesser
      values:
        token: "<"
    - name: Greater
      values:
        token: ">"
    - name: GreaterEqual
      values:
        token: ">="
    - name: LesserEqual
      values:
        token: "<="
    - name: BooleanAnd
      values:
        token: "and"
    - name: BooleanOr
      values:
        token: "or"
    - name: BinaryAnd
      values:
        token: "&"
    - name: BinaryOr
      values:
        token: "|"
    - name: BinaryExclusiveOr
      values:
        token: "^"
  InfixOperation:
    parent: Expression
    values:
    - name: left
      type: Expression
    - name: op
      type: InfixOperator
    - name: right
      type: Expression
  BooleanLiteral:
    parent: Expression
    values:
    - name: value
      type: Boolean
  FunctionCall:
    parent: Expression
    referencedElementValue: symbol
    referencedElementType: FunctionDefinition
    values:
    - name: symbol
      type: Symbol
    - name: arguments
      type: List<Expression>
  ArgumentSpec:
    parent: Node
    namedElementValue: symbol
    values:
    - name: symbol
      type: Symbol
    - name: typeSpec
      type: TypeSpec?
    - name: multiple
      type: Boolean
      defaultValue: "false"
  FunctionDefinition:
    parent: Definition
    namedElementValue: symbol
    values:
    - name: modifiers
      type: DefinitionModifiers
    - name: symbol
      type: Symbol
    - name: arguments
      type: List<ArgumentSpec>
    - name: returnType
      type: TypeSpec?
    - name: block
      type: Block?
    - name: nativeFunctionDescriptor
      type: NativeFunctionDescriptor?
  LetDefinition:
    parent: Definition
    namedElementValue: symbol
    values:
    - name: modifiers
      type: DefinitionModifiers
    - name: symbol
      type: Symbol
    - name: typeSpec
      type: TypeSpec?
    - name: value
      type: Expression
  If:
    parent: Expression
    values:
    - name: condition
      type: Expression
    - name: thenBlock
      type: Block
    - name: elseBlock
      type: Block?
  ImportPath:
    parent: Node
    referencedElementValue: components
    referencedElementType: CompilationUnit
    values:
    - name: components
      type: List<Symbol>
  ImportDeclaration:
    parent: Declaration
    values:
    - name: form
      type: Symbol
    - name: path
      type: ImportPath
  IntegerLiteral:
    parent: Expression
    values:
    - name: value
      type: Int
  LongLiteral:
    parent: Expression
    values:
    - name: value
      type: Long
  DoubleLiteral:
    parent: Expression
    values:
    - name: value
      type: Double
  ListLiteral:
    parent: Expression
    values:
    - name: items
      type: List<Expression>
  Parentheses:
    parent: Expression
    values:
    - name: expression
      type: Expression
  PrefixOperator:
    values:
    - name: token
      type: String
    enums:
    - name: BooleanNot
      values:
        token: "not"
    - name: UnaryPlus
      values:
        token: "+"
    - name: UnaryMinus
      values:
        token: "-"
    - name: BinaryNot
      values:
        token: "~"
  PrefixOperation:
    parent: Expression
    values:
    - name: op
      type: PrefixOperator
    - name: expression
      type: Expression
  SuffixOperator:
    values:
    - name: token
      type: String
    enums:
    - name: Increment
      values:
        token: "++"
    - name: Decrement
      values:
        token: "--"
  SuffixOperation:
    parent: Expression
    values:
    - name: op
      type: SuffixOperator
    - name: reference
      type: SymbolReference
  StringLiteral:
    parent: Expression
    values:
    - name: text
      type: String
  SymbolReference:
    parent: Expression
    referencedElementValue: symbol
    referencedElementType: Node
    namedElementValue: symbol
    values:
    - name: symbol
      type: Symbol
  While:
    parent: Expression
    values:
    - name: condition
      type: Expression
    - name: block
      type: Block
  ForInItem:
    parent: Node
    namedElementValue: symbol
    values:
    - name: symbol
      type: Symbol
  ForIn:
    parent: Expression
    values:
    - name: item
      type: ForInItem
    - name: expression
      type: Expression
    - name: block
      type: Block
  Break:
    parent: Expression
    values: []
  Continue:
    parent: Expression
    values: []
  Return:
    parent: Expression
    values:
    - name: value
      type: Expression
  NoneLiteral:
    parent: Expression
    values: []
  NativeFunctionDescriptor:
    parent: Node
    values:
    - name: form
      type: Symbol
    - name: definitions
      type: List<StringLiteral>
  IndexedBy:
    parent: Expression
    values:
    - name: expression
      type: Expression
    - name: index
      type: Expression
